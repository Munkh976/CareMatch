titlePanel("CareMatch Chatbot"),
sidebarLayout(
sidebarPanel(
radioButtons("user_type", "Are you an Elderly person or a Volunteer?",
choices = c("Elderly" = "E", "Volunteer" = "V")),
numericInput("user_id", "Enter your ID:", value = NULL),
actionButton("start_chat", "Start Matching", class = "btn-primary"),
br(),
conditionalPanel(
condition = "input.user_type == 'V'",
checkboxInput("filter_distance", "Show only <2 km"),
checkboxInput("flexible_timing", "Flexible timing")
)
),
mainPanel(
verbatimTextOutput("chat_response")
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(matches = NULL, cluster_matches = NULL)
observeEvent(input$start_chat, {
req(input$user_id, input$user_type)
if (input$user_type == "E") {
# Elderly matching
elderly_profile <- data$elderly %>% filter(elderly_id == input$user_id)
if (nrow(elderly_profile) == 0) {
output$chat_response <- renderText("User not found. Please check your ID.")
return()
}
elder_needs <- data$elderly_needs %>%
filter(elderly_id == elderly_profile$elderly_id) %>%
left_join(data$needs, by = "need_id") %>%
pull(need_name)
rv$matches <- data$volunteers %>%
rowwise() %>%
mutate(
distance = calculate_distance(elderly_profile$lat, elderly_profile$lng, lat, lng),
skills = list(data$volunteer_skills %>%
filter(volunteer_id == volunteer_id) %>%
left_join(data$skills, by = "skill_id") %>%
pull(skill_name)),
similarity = jaccard_similarity(elder_needs, skills),
time_match = time_slot_overlap(elderly_profile$preferred_time_slots, availability)
) %>%
ungroup() %>%
filter(
is.finite(distance),
distance <= radius_willingness,
similarity > 0
) %>%
arrange(desc(similarity), desc(time_match), distance) %>%
head(3)
output$chat_response <- renderText({
if (nrow(rv$matches) == 0) {
"No matches found. Try adjusting your radius or availability."
} else {
paste0("Top Matches:\n", paste(apply(rv$matches, 1, function(v) {
paste0("- ", v["name"], ": ",
"Skills: ", paste(v[["skills"]][[1]], collapse = ", "), ", ",
"Distance: ", round(as.numeric(v["distance"]), 1), " miles, ",
"Availability: ", v["availability"])
}), collapse = "\n"))
}
})
} else {
# Volunteer matching
volunteer_profile <- data$volunteers %>% filter(volunteer_id == input$user_id)
if (nrow(volunteer_profile) == 0) {
output$chat_response <- renderText("User not found. Please check your ID.")
return()
}
volunteer_skills <- data$volunteer_skills %>%
filter(volunteer_id == volunteer_profile$volunteer_id) %>%
left_join(data$skills, by = "skill_id") %>%
pull(skill_name)
matches <- data$elderly %>%
rowwise() %>%
mutate(
distance = calculate_distance(lat, lng, volunteer_profile$lat, volunteer_profile$lng),
needs = list(data$elderly_needs %>%
filter(elderly_id == elderly_id) %>%
left_join(data$needs, by = "need_id") %>%
pull(need_name)),
similarity = jaccard_similarity(volunteer_skills, needs),
time_match = time_slot_overlap(volunteer_profile$availability, preferred_time_slots)
) %>%
ungroup() %>%
filter(
is.finite(distance),
distance <= volunteer_profile$radius_willingness,
similarity > 0
)
if (input$filter_distance) {
matches <- matches %>% filter(distance < 2)
}
if (input$flexible_timing) {
matches <- matches %>% filter(time_match > 0)
}
rv$matches <- matches %>%
arrange(desc(similarity), desc(time_match), distance) %>%
head(3)
if (nrow(rv$matches) == 0) {
# Cluster fallback
similar_volunteers <- data$historical_matches %>%
group_by(volunteer_id) %>%
summarise(n_matches = n()) %>%
arrange(desc(n_matches)) %>%
head(5) %>%
pull(volunteer_id)
rv$cluster_matches <- data$historical_matches %>%
filter(volunteer_id %in% similar_volunteers) %>%
distinct(elderly_id) %>%
left_join(data$elderly, by = "elderly_id") %>%
mutate(distance = calculate_distance(lat, lng, volunteer_profile$lat, volunteer_profile$lng)) %>%
filter(distance <= volunteer_profile$radius_willingness) %>%
arrange(distance) %>%
head(3)
output$chat_response <- renderText({
if (nrow(rv$cluster_matches) == 0) {
"No matches. Expand your radius or adjust availability."
} else {
paste0("Recommended Elderly:\n", paste(apply(rv$cluster_matches, 1, function(e) {
paste0("- ", e["name"], ": Distance: ", round(as.numeric(e["distance"]), 1), " miles")
}), collapse = "\n"))
}
})
} else {
output$chat_response <- renderText({
paste0("Top Matches:\n", paste(apply(rv$matches, 1, function(e) {
paste0("- ", e["name"], ": ",
"Needs: ", paste(e[["needs"]][[1]], collapse = ", "), ", ",
"Distance: ", round(as.numeric(e["distance"]), 1), " miles, ",
"Time: ", e["preferred_time_slots"])
}), collapse = "\n"))
})
}
}
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(geosphere)
# Load data
load_data <- function() {
list(
elderly = read.csv("elderly.csv"),
volunteers = read.csv("volunteers.csv"),
needs = read.csv("needs.csv"),
skills = read.csv("skills.csv"),
elderly_needs = read.csv("elderly_needs.csv"),
volunteer_skills = read.csv("volunteer_skills.csv"),
historical_matches = read.csv("historical_matches.csv")
)
}
data <- load_data()
calculate_distance <- function(lat1, lon1, lat2, lon2) {
if (any(is.na(c(lat1, lon1, lat2, lon2)))) return(Inf)
distHaversine(c(lon1, lat1), c(lon2, lat2)) / 1609.34
}
jaccard_similarity <- function(set1, set2) {
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
if (union == 0) return(0)
intersection / union
}
time_slot_overlap <- function(slots1, slots2) {
slots1_list <- unlist(strsplit(slots1, ", "))
slots2_list <- unlist(strsplit(slots2, ", "))
length(intersect(slots1_list, slots2_list))
}
ui <- fluidPage(
titlePanel("CareMatch Chatbot"),
uiOutput("chat_ui")
)
server <- function(input, output, session) {
data <- load_data()
rv <- reactiveValues(
step = 1,
user_type = NULL,
user_id = NULL,
matches = NULL,
cluster_matches = NULL
)
output$chat_ui <- renderUI({
switch(rv$step,
'1' = tagList(
h4("Hi! Are you an Elderly person or a Volunteer?"),
actionButton("select_elderly", "Elderly"),
actionButton("select_volunteer", "Volunteer")
),
'2' = tagList(
h4("Great! Please enter your ID."),
textInput("user_id", "User ID:"),
actionButton("confirm_id", "Continue")
),
'3' = tagList(
h4("Let's find your best matches..."),
verbatimTextOutput("chat_response"),
actionButton("see_matches", "See Matches"),
if (rv$user_type == "V") {
tagList(
checkboxInput("filter_distance", "Show only <2 km"),
checkboxInput("flexible_timing", "Flexible timing")
)
}
)
)
})
observeEvent(input$select_elderly, {
rv$user_type <- "E"
rv$step <- 2
})
observeEvent(input$select_volunteer, {
rv$user_type <- "V"
rv$step <- 2
})
observeEvent(input$confirm_id, {
if (!is.null(input$user_id) && input$user_id != "") {
rv$user_id <- as.numeric(input$user_id)
rv$step <- 3
}
})
observeEvent(input$see_matches, {
if (rv$user_type == "E") {
elderly_profile <- data$elderly %>% filter(elderly_id == rv$user_id)
if (nrow(elderly_profile) == 0) {
output$chat_response <- renderText("User not found.")
return()
}
elder_needs <- data$elderly_needs %>%
filter(elderly_id == elderly_profile$elderly_id) %>%
left_join(data$needs, by = "need_id") %>%
pull(need_name)
rv$matches <- data$volunteers %>%
rowwise() %>%
mutate(
distance = calculate_distance(elderly_profile$lat, elderly_profile$lng, lat, lng),
skills = list(data$volunteer_skills %>%
filter(volunteer_id == volunteer_id) %>%
left_join(data$skills, by = "skill_id") %>%
pull(skill_name)),
similarity = jaccard_similarity(elder_needs, skills),
time_match = time_slot_overlap(elderly_profile$preferred_time_slots, availability)
) %>%
ungroup() %>%
filter(is.finite(distance), distance <= radius_willingness, similarity > 0) %>%
arrange(desc(similarity), desc(time_match), distance) %>%
head(3)
output$chat_response <- renderText({
if (nrow(rv$matches) == 0) {
"No matches found. Try adjusting your radius or availability."
} else {
paste0("Top Matches:\n", paste(apply(rv$matches, 1, function(v) {
paste0("- ", v["name"], ": ", paste(v[["skills"]][[1]], collapse = ", "),
", Distance: ", round(as.numeric(v["distance"]), 1), " miles")
}), collapse = "\n"))
}
})
} else if (rv$user_type == "V") {
volunteer_profile <- data$volunteers %>% filter(volunteer_id == rv$user_id)
if (nrow(volunteer_profile) == 0) {
output$chat_response <- renderText("User not found.")
return()
}
volunteer_skills <- data$volunteer_skills %>%
filter(volunteer_id == volunteer_profile$volunteer_id) %>%
left_join(data$skills, by = "skill_id") %>%
pull(skill_name)
matches <- data$elderly %>%
rowwise() %>%
mutate(
distance = calculate_distance(lat, lng, volunteer_profile$lat, volunteer_profile$lng),
needs = list(data$elderly_needs %>%
filter(elderly_id == elderly_id) %>%
left_join(data$needs, by = "need_id") %>%
pull(need_name)),
similarity = jaccard_similarity(volunteer_skills, needs),
time_match = time_slot_overlap(volunteer_profile$availability, preferred_time_slots)
) %>%
ungroup() %>%
filter(is.finite(distance), distance <= volunteer_profile$radius_willingness, similarity > 0)
if (input$filter_distance) {
matches <- matches %>% filter(distance < 2)
}
if (input$flexible_timing) {
matches <- matches %>% filter(time_match > 0)
}
rv$matches <- matches %>% arrange(desc(similarity), desc(time_match), distance) %>% head(3)
if (nrow(rv$matches) == 0) {
similar_volunteers <- data$historical_matches %>%
group_by(volunteer_id) %>%
summarise(n_matches = n()) %>%
arrange(desc(n_matches)) %>%
head(5) %>%
pull(volunteer_id)
rv$cluster_matches <- data$historical_matches %>%
filter(volunteer_id %in% similar_volunteers) %>%
distinct(elderly_id) %>%
left_join(data$elderly, by = "elderly_id") %>%
mutate(distance = calculate_distance(lat, lng, volunteer_profile$lat, volunteer_profile$lng)) %>%
filter(distance <= volunteer_profile$radius_willingness) %>%
arrange(distance) %>%
head(3)
output$chat_response <- renderText({
if (nrow(rv$cluster_matches) == 0) {
"No matches. Expand your radius or adjust availability."
} else {
paste0("Recommended Elderly:\n", paste(apply(rv$cluster_matches, 1, function(e) {
paste0("- ", e["name"], ": Distance: ", round(as.numeric(e["distance"]), 1), " miles")
}), collapse = "\n"))
}
})
} else {
output$chat_response <- renderText({
paste0("Top Matches:\n", paste(apply(rv$matches, 1, function(e) {
paste0("- ", e["name"], ": Needs: ", paste(e[["needs"]][[1]], collapse = ", "),
", Distance: ", round(as.numeric(e["distance"]), 1), " miles")
}), collapse = "\n"))
})
}
}
})
}
shinyApp(ui, server)
runApp('Chatbot4.R')
runApp('Chatbot4.R')
library(shiny)
library(zipcodeR)
library(dplyr)
# Initialize elderly.csv and volunteers.csv if not exist
if(!file.exists("elderly.csv")) {
data.frame(
elderly_id = integer(),
name = character(),
age = integer(),
major_city = character(),
state = character(),
lat = numeric(),
lng = numeric(),
preferred_time_slots = character(),
stringsAsFactors = FALSE
) %>% write.csv("elderly.csv", row.names = FALSE)
}
if(!file.exists("volunteers.csv")) {
data.frame(
volunteer_id = integer(),
volunteer_name = character(),
major_city = character(),
state = character(),
lat = numeric(),
lng = numeric(),
availability = character(),
radius = integer(),
acceptance_probability = numeric(),
stringsAsFactors = FALSE
) %>% write.csv("volunteers.csv", row.names = FALSE)
}
ui <- fluidPage(
tags$head(
tags$style(HTML("#chatbox {height: 400px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; background-color: #f9f9f9;} .user-msg { text-align: right; color: blue; margin: 5px;} .bot-msg { text-align: left; color: green; margin: 5px;}"))
),
titlePanel("CareMatch Assistant Chatbot"),
mainPanel(
width = 12,
wellPanel(id = "chatbox", uiOutput("chatHistory")),
fluidRow(
column(10, textInput("userInput", "", placeholder = "Type your response here...")),
column(2, actionButton("submit", "Send", class = "btn-primary"))
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
chat_history = list(),
current_state = "ask_type",
registration_data = list(),
current_question = NULL
)
bot_message <- function(text) {
rv$chat_history <- c(rv$chat_history, list(list(type = "bot", text = text)))
}
user_message <- function(text) {
rv$chat_history <- c(rv$chat_history, list(list(type = "user", text = text)))
}
output$chatHistory <- renderUI({
tagList(
lapply(rv$chat_history, function(msg) {
div(class = paste0(msg$type, "-msg"), strong(ifelse(msg$type == "user", "You: ", "Bot: ")), msg$text)
})
)
})
observe({
if(length(rv$chat_history) == 0) {
bot_message("Welcome to CareMatch! Are you an 'Elderly person' or 'Volunteer'?")
}
})
observeEvent(input$submit, {
req(input$userInput)
user_input <- trimws(input$userInput)
if(user_input == "") return()
user_message(user_input)
switch(rv$current_state,
"ask_type" = handle_initial_input(user_input),
"elderly_registration_check" = handle_registration_check(user_input),
"elderly_registration" = handle_registration_process(user_input),
"elderly_waiting" = show_elderly_matches(user_input),
"volunteer_registration_check" = handle_volunteer_registration_check(user_input),
"volunteer_registration" = handle_volunteer_registration(user_input),
"volunteer_ready" = show_volunteer_matches(user_input))
updateTextInput(session, "userInput", value = "")
})
handle_initial_input <- function(input) {
if(tolower(input) %in% c("elderly", "elderly person")) {
bot_message("Have you registered before? (Yes/No)")
rv$current_state <- "elderly_registration_check"
rv$user_type <- "elderly"
} else if(tolower(input) %in% c("volunteer", "v")) {
bot_message("Have you registered before? (Yes/No)")
rv$current_state <- "volunteer_registration_check"
rv$user_type <- "volunteer"
} else {
bot_message("Please respond with 'Elderly person' or 'Volunteer'")
}
}
handle_registration_check <- function(input) {
if(tolower(input) %in% c("yes", "y")) {
bot_message("Please enter your ID.")
rv$current_state <- "elderly_waiting"
} else if(tolower(input) %in% c("no", "n")) {
start_registration()
} else {
bot_message("Please answer with 'Yes' or 'No'")
}
}
start_registration <- function() {
bot_message("Please enter your full name (Last, First):")
rv$current_state <- "elderly_registration"
rv$current_question <- "name"
}
handle_registration_process <- function(input) {
# For simplicity, handle name, age, city, state, zipcode, time_slots sequentially
# This is just a placeholder pattern for your real fields
bot_message("Thank you! Registration complete. Your ID is 1.")
rv$current_state <- "elderly_waiting"
}
show_elderly_matches <- function(input) {
bot_message("Searching for matches (rule-based)...")
bot_message("No matches found. Try adjusting your radius or availability?")
}
handle_volunteer_registration_check <- function(input) {
if(tolower(input) %in% c("yes", "y")) {
bot_message("Please enter your ID.")
rv$current_state <- "volunteer_ready"
} else if(tolower(input) %in% c("no", "n")) {
bot_message("Let's register you. What's your name?")
rv$current_state <- "volunteer_registration"
rv$current_question <- "vol_name"
} else {
bot_message("Please answer with 'Yes' or 'No'")
}
}
handle_volunteer_registration <- function(input) {
bot_message("Thank you! Registration complete. Your ID is 1.")
rv$current_state <- "volunteer_ready"
}
show_volunteer_matches <- function(input) {
bot_message("Searching for matches (rule-based)...")
bot_message("No matches. Expand your radius or adjust availability?")
}
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(randomNames)
library(zipcodeR)
# --- Generate Sample Data (Run this once) ---
set.seed(123)
# Generate 1000 elderly profiles
generate_elderly_profiles <- function(n) {
data.frame(
name = randomNames(n, which.names = "first.last"),
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zip, n, replace = TRUE),
needs = replicate(n, paste(sample(c("Grocery help", "Transportation", "Companionship",
"Meal prep", "Housekeeping", "Medical reminders",
"Technology help", "Exercise companion"),
sample(1:3), replace = FALSE), collapse = ", ")),
stringsAsFactors = FALSE
) %>%
left_join(zip_code_db, by = "zip") %>%
select(name, age, city, state, needs)
}
# Generate 1000 volunteer profiles
generate_volunteer_profiles <- function(n) {
data.frame(
name = randomNames(n, which.names = "first.last"),
city = sample(unique(zipcode_db$city), n, replace = TRUE),
state = sample(state.abb, n, replace = TRUE),
skills = replicate(n, paste(sample(c("Grocery help", "Transportation", "Companionship",
"Meal prep", "Housekeeping", "Medical expertise",
"Tech support", "Physical therapy"),
sample(1:4), replace = FALSE), collapse = ", ")),
availability = replicate(n, paste(sample(c("Mon 9-12", "Tue 14-17", "Wed 10-13",
"Thu 15-18", "Fri 11-14", "Sat 10-16"),
sample(2:3)), collapse = ", ")),
stringsAsFactors = FALSE
)
}
# --- Shiny App Code ---
elderly_profiles <- read.csv("elderly_profiles.csv", stringsAsFactors = FALSE)
