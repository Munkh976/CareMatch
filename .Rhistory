mainPanel(
uiOutput("chat"),
width = 8
)
)
)
# Define Server
server <- function(input, output, session) {
chat_history <- reactiveVal(data.frame(User = character(), Message = character(), stringsAsFactors = FALSE))
observeEvent(input$last_name, {
matched_elder <- elderly_profiles[elderly_profiles$Last_Name == input$last_name &
elderly_profiles$Age == input$user_age &
elderly_profiles$Gender == input$gender &
elderly_profiles$Location == input$user_location, ]
if (nrow(matched_elder) > 0) {
updateCheckboxGroupInput(session, "user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(matched_elder$Needs, ", "))),
selected = unlist(strsplit(matched_elder$Needs, ", ")))
}
})
output$needs_choices <- renderUI({
checkboxGroupInput("user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(paste(elderly_profiles$Needs, collapse = ", "), ", "))))
})
observeEvent(input$submit_elderly, {
req(input$last_name, input$user_age, input$gender, input$user_location, input$user_needs, input$preferred_time)
isolate({
new_entry <- data.frame(
User = input$last_name,
Message = paste("Hello", input$last_name, "! You need help with:", paste(input$user_needs, collapse = ", "),
"at", input$preferred_time, "."),
stringsAsFactors = FALSE
)
chat_history(rbind(chat_history(), new_entry))
# Matching Volunteers
matched_volunteers <- volunteer_profiles[volunteer_profiles$Location == input$user_location &
grepl(paste(input$user_needs, collapse = "|"), volunteer_profiles$Skills) &
volunteer_profiles$Availability == input$preferred_time, ]
if (nrow(matched_volunteers) > 0) {
matches <- paste(matched_volunteers$Name, "- Skills:", matched_volunteers$Skills, "- Available:", matched_volunteers$Availability, collapse = "\n")
} else {
matches <- "No matching volunteers found."
}
chat_history(rbind(chat_history(), data.frame(User = "System", Message = matches, stringsAsFactors = FALSE)))
})
})
output$chat <- renderUI({
chat_content <- chat_history()
if (nrow(chat_content) == 0) {
h4("Welcome! Please enter your details to find assistance.")
} else {
do.call(tagList, lapply(1:nrow(chat_content), function(i) {
div(
strong(chat_content$User[i]), ": ", chat_content$Message[i],
style = "margin-bottom: 10px;"
)
}))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
elderly_profiles <- read.csv("elderly_profiles.csv", stringsAsFactors = FALSE)
care_requests <- read.csv("care_requests.csv", stringsAsFactors = FALSE)
notifications <- read.csv("notifications.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("CareMatch Community Portal"),
tags$head(tags$style("
.error {color: red; font-weight: bold;}
.warning {color: orange;}
")),
sidebarLayout(
sidebarPanel(
div(class = "user-type",
radioButtons("user_type", "Are you here as:",
choices = c("Elder needing care" = "elder",
"Volunteer caregiver" = "volunteer"),
selected = character(0))
),
numericInput("user_id", "Enter your ID:", value = NA, min = 1),
actionButton("submit", "Submit", class = "btn-primary"),
uiOutput("login_error"),
width = 3
),
mainPanel(
uiOutput("main_display"),
width = 9
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
current_step = "type_selection",
user_data = NULL,
login_error = NULL
)
observeEvent(input$user_type, {
rv$current_step <- "auth"
rv$user_data <- list(type = input$user_type)
rv$login_error <- NULL
})
output$login_error <- renderUI({
if (!is.null(rv$login_error)) {
div(class = "error", rv$login_error)
}
})
observeEvent(input$submit, {
req(input$user_id, input$user_type)
if (is.na(input$user_id)) {
rv$login_error <- "Please enter a valid ID number"
return()
}
user <- switch(
input$user_type,
"elder" = elderly_profiles %>% filter(elderly_id == input$user_id),
"volunteer" = volunteer_profiles %>% filter(volunteer_id == input$user_id),
{
rv$login_error <- "Please select user type"
return()
}
)
if (nrow(user) == 0) {
rv$login_error <- "ID not found in our system"
return()
}
rv$user_data <- as.list(user[1, ])
rv$current_step <- ifelse(input$user_type == "elder", "confirm_needs", "volunteer_dashboard")
rv$login_error <- NULL
})
output$main_display <- renderUI({
req(rv$current_step)
switch(
rv$current_step,
"confirm_needs" = confirm_needs_ui(),
"volunteer_dashboard" = volunteer_dashboard_ui(),
h4("Please authenticate using your ID")
)
})
# Reactive location display:
output$user_location <- renderUI({
if (!is.null(rv$user_data)) {  # Check if user data is loaded
p(strong("Location:"), paste(rv$user_data$city, rv$user_data$state))
} else {
NULL # Or some placeholder if you prefer
}
})
confirm_needs_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"), # Use the reactive output
h4("Your Current Needs:"),
p(rv$user_data$needs),
actionButton("update_needs", "Update Needs", class = "btn-warning"),
actionButton("submit_request", "Submit New Request", class = "btn-success")
)
}
volunteer_dashboard_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"), # Use the reactive output
h4("Your Skills:"),
p(rv$user_data$skills),
h4("Pending Requests in Your Area:"),
uiOutput("volunteer_requests")
)
}
output$volunteer_requests <- renderUI({
req(rv$user_data$city, rv$user_data$state) # Require both city and state
requests <- care_requests %>%
filter(city == rv$user_data$city,
# state == rv$user_data$state, # Filter by state as well
status == "Pending") %>%
left_join(elderly_profiles, by = "elderly_id")
if (nrow(requests) > 0) {
lapply(1:nrow(requests), function(i) {
req <- requests[i, ]
div(class = "request-card",
h5(paste("Request from", req$name.y)), # Use elderly name from join
p(paste("Needs:", req$needs.x)), # Use elderly needs
p(paste("Request Date:", req$request_date)),
actionButton(paste0("accept_", req$request_id), "Accept",
class = "btn-success btn-sm")
)
})
} else {
h4("No pending requests in your area")
}
})
observeEvent(input$submit_request, {
new_request <- data.frame(
elderly_id = rv$user_data$elderly_id,
request_date = Sys.Date(),
status = "Pending",
needs = rv$user_data$needs,
city = rv$user_data$city,
state = rv$user_data$state
)
care_requests <<- bind_rows(care_requests, new_request)
write.csv(care_requests, "care_requests.csv", row.names = FALSE)
showNotification("New care request submitted!", type = "message")
})
}
shinyApp(ui, server)
library(shiny)
# Define the user interface (UI)
ui <- fluidPage(
titlePanel("Simple R Shiny Chatbot"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input box for the user to type a message
textInput("userInput", "Type your message:", ""),
# Button to submit the message
actionButton("sendBtn", "Send"),
br(), br(),
h5("Instructions:"),
p("Type a message and press the Send button to interact with the chatbot.")
),
mainPanel(
# Show the conversation log
h4("Conversation:"),
verbatimTextOutput("chatHistory")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# ReactiveValues object to store the chat history
chatData <- reactiveVal(value = data.frame(
speaker = character(),
text = character(),
stringsAsFactors = FALSE
))
# Observe event when 'Send' button is clicked
observeEvent(input$sendBtn, {
# Get user message
user_msg <- trimws(input$userInput)
# Do nothing if user types nothing
if (nchar(user_msg) == 0) return()
# Append user's message to chat
newData <- rbind(
chatData(),
data.frame(speaker = "User", text = user_msg, stringsAsFactors = FALSE)
)
# Generate a response (basic rule-based logic for demo)
# You can replace this with calls to more advanced NLP or OpenAI APIs
bot_response <- generateBotResponse(user_msg)
# Append bot's response
newData <- rbind(
newData,
data.frame(speaker = "Bot", text = bot_response, stringsAsFactors = FALSE)
)
# Update the reactive chatData
chatData(newData)
# Clear the user input box
updateTextInput(session, "userInput", value = "")
})
# Display the chat history in the main panel
output$chatHistory <- renderText({
chatLog <- chatData()
if (nrow(chatLog) == 0) return("")
# Format each conversation turn
formatted <- apply(chatLog, 1, function(row) {
paste0(row["speaker"], ": ", row["text"])
})
paste(formatted, collapse = "\n")
})
}
# A simple, rule-based response generator (for demonstration)
generateBotResponse <- function(user_message) {
# A few naive examples
if (grepl("hello|hi", user_message, ignore.case = TRUE)) {
return("Hello! How can I help you today?")
} else if (grepl("bye|goodbye", user_message, ignore.case = TRUE)) {
return("Goodbye! Have a great day.")
} else if (grepl("name", user_message, ignore.case = TRUE)) {
return("Iâ€™m ShinyBot, your friendly R chatbot.")
}
# Default response
return("I see. Can you tell me more?")
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(lubridate)
# Sample data frames
elderly_profiles <- data.frame(
name = c("John Doe", "Jane Smith"),
age = c(75, 82),
gender = c("Male", "Female"),
location = c("New York", "Los Angeles"),
needs = c("Grocery help, Transportation", "Companionship, Meal prep"),
stringsAsFactors = FALSE
)
volunteer_profiles <- data.frame(
name = c("Alice Brown", "Bob Wilson"),
skills = c("Grocery help, Transportation", "Companionship, Housekeeping"),
location = c("New York", "Los Angeles"),
availability = c("Mon 10-12, Wed 14-16", "Tue 09-11, Thu 13-15"),
stringsAsFactors = FALSE
)
ui <- fluidPage(
titlePanel("CareMatch - Elderly Care Matching System"),
sidebarLayout(
sidebarPanel(
textInput("user_input", "Type your response:"),
actionButton("submit", "Submit"),
br(),
helpText("Conversation flow: 1. Name -> 2. Age -> 3. Gender -> 4. Location -> 5. Needs")
),
mainPanel(
uiOutput("chat_history"),
br(),
uiOutput("recommendations")
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
step = 1,
user_data = list(),
selected_needs = character()
)
observeEvent(input$submit, {
if (rv$step == 1) {
# Find user profile
user_profile <- elderly_profiles %>%
filter(tolower(name) == tolower(input$user_input))
if (nrow(user_profile) > 0) {
rv$user_data <- as.list(user_profile)
rv$selected_needs <- unlist(strsplit(user_profile$needs, ", "))
rv$step <- 5  # Skip to needs confirmation
} else {
rv$user_data$name <- input$user_input
rv$step <- 2
}
} else if (rv$step == 2) {
rv$user_data$age <- input$user_input
rv$step <- 3
} else if (rv$step == 3) {
rv$user_data$gender <- input$user_input
rv$step <- 4
} else if (rv$step == 4) {
rv$user_data$location <- input$user_input
rv$step <- 5
} else if (rv$step == 5) {
if (length(rv$selected_needs) == 0) {
# If no profile found, ask to select needs
rv$selected_needs <- unlist(strsplit(input$user_input, ", "))
}
rv$step <- 6
}
# Clear input after submission
updateTextInput(session, "user_input", value = "")
})
output$chat_history <- renderUI({
tagList(
if (rv$step >= 1) p(strong("System:"), "Please enter your full name"),
if (rv$step >= 2) p(strong("System:"), "Please enter your age"),
if (rv$step >= 3) p(strong("System:"), "Please enter your gender"),
if (rv$step >= 4) p(strong("System:"), "Please enter your location (city/state)"),
if (rv$step >= 5 && length(rv$selected_needs) == 0) {
needs <- unique(unlist(strsplit(elderly_profiles$needs, ", ")))
p(strong("System:"), "Please select your needs from: ", paste(needs, collapse = ", "))
}
)
})
output$recommendations <- renderUI({
if (rv$step == 6) {
# Matching algorithm
matched_volunteers <- volunteer_profiles %>%
filter(tolower(location) == tolower(rv$user_data$location)) %>%
mutate(
skills_list = strsplit(skills, ", "),
jaccard = sapply(skills_list, function(x) {
intersection <- length(intersect(x, rv$selected_needs))
union <- length(union(x, rv$selected_needs))
intersection / union
})
) %>%
filter(jaccard > 0) %>%
arrange(desc(jaccard))
tagList(
h4("Recommended Volunteers:"),
if (nrow(matched_volunteers) > 0) {
renderTable({
matched_volunteers %>%
select(Name = name, Skills = skills, Location = location,
Availability = availability, Match_Score = jaccard)
})
} else {
p("No matching volunteers found. Please try different needs or check back later.")
}
)
}
})
}
shinyApp(ui, server)
library(shiny)
# Load data from CSV
elderly_profiles <- read.csv("elderly.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteers.csv", stringsAsFactors = FALSE)
# Define UI
ui <- fluidPage(
titlePanel("Elderly Care Matching Chatbot"),
sidebarLayout(
sidebarPanel(
selectInput("user_type", "Are you an Elderly Person or a Volunteer?",
choices = c("Elderly", "Volunteer")),
textInput("last_name", "Your Last Name:"),
numericInput("user_age", "Your Age:", value = NA, min = 60, max = 120),
selectInput("gender", "Your Gender:", choices = c("Male", "Female")),
textInput("user_location", "Your Zip Code:"),
conditionalPanel(
condition = "input.user_type == 'Elderly'",
uiOutput("needs_choices"),
selectInput("preferred_time", "Preferred Time:",
choices = c("Morning", "Afternoon", "Evening")),
actionButton("submit_elderly", "Find Volunteers")
),
width = 4
),
mainPanel(
uiOutput("chat"),
width = 8
)
)
)
# Define Server
server <- function(input, output, session) {
chat_history <- reactiveVal(data.frame(User = character(), Message = character(), stringsAsFactors = FALSE))
observeEvent(input$last_name, {
matched_elder <- elderly_profiles[elderly_profiles$Last_Name == input$last_name &
elderly_profiles$Age == input$user_age &
elderly_profiles$Gender == input$gender &
elderly_profiles$Location == input$user_location, ]
if (nrow(matched_elder) > 0) {
updateCheckboxGroupInput(session, "user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(matched_elder$Needs, ", "))),
selected = unlist(strsplit(matched_elder$Needs, ", ")))
}
})
output$needs_choices <- renderUI({
checkboxGroupInput("user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(paste(elderly_profiles$Needs, collapse = ", "), ", "))))
})
observeEvent(input$submit_elderly, {
req(input$last_name, input$user_age, input$gender, input$user_location, input$user_needs, input$preferred_time)
isolate({
new_entry <- data.frame(
User = input$last_name,
Message = paste("Hello", input$last_name, "! You need help with:", paste(input$user_needs, collapse = ", "),
"at", input$preferred_time, "."),
stringsAsFactors = FALSE
)
chat_history(rbind(chat_history(), new_entry))
# Matching Volunteers
matched_volunteers <- volunteer_profiles[volunteer_profiles$Location == input$user_location &
grepl(paste(input$user_needs, collapse = "|"), volunteer_profiles$Skills) &
volunteer_profiles$Availability == input$preferred_time, ]
if (nrow(matched_volunteers) > 0) {
matches <- paste(matched_volunteers$Name, "- Skills:", matched_volunteers$Skills, "- Available:", matched_volunteers$Availability, collapse = "\n")
} else {
matches <- "No matching volunteers found."
}
chat_history(rbind(chat_history(), data.frame(User = "System", Message = matches, stringsAsFactors = FALSE)))
})
})
output$chat <- renderUI({
chat_content <- chat_history()
if (nrow(chat_content) == 0) {
h4("Welcome! Please enter your details to find assistance.")
} else {
do.call(tagList, lapply(1:nrow(chat_content), function(i) {
div(
strong(chat_content$User[i]), ": ", chat_content$Message[i],
style = "margin-bottom: 10px;"
)
}))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
chatbot <- function(){
#Greeting
cat("Welcome to CareMatch Assistance Chatbot!\n")
#Loop util the user provides valid input
while(TRUE){
#Ask for user type
cat("Are you an \"Elderly person seeking assistance\" or \"Volunteer\"? ")
user_type <- tolower(trimws(readline()))
#Check the response
# Check response
if (user_type %in% c("elderly", "volunteer")) {
cat(paste("\nThank you for selecting", user_type, "role!\n"))
cat("We will customize the rest of the conversation flow later.\n")
break
} else {
cat("\nInvalid option. Please try again.\n\n")
}
}
}
#Run the chatbot
chatbot()
