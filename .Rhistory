elderly_needs_data <- data.frame(
elderly_id = sample(1:1000, 2000, replace = TRUE),
need_id = sample(1:10, 2000, replace = TRUE)
)
# Volunteer_Skills (2000 rows)
volunteer_skills_data <- data.frame(
volunteer_id = sample(1:1000, 2000, replace = TRUE),
skill_id = sample(1:10, 2000, replace = TRUE)
)
# Match (1000 rows)
match_data <- data.frame(
match_id = 1:1000,
elderly_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE),
match_score = runif(1000, 0.5, 1),
time_slot_overlap = sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), 1000, replace = TRUE),
location_distance = runif(1000, 1, 20),
acceptance_probability = runif(1000, 0.5, 1),
status = sample(c("Pending", "Accepted", "Rejected"), 1000, replace = TRUE)
)
# Notification (1000 rows)
notification_data <- data.frame(
notification_id = 1:1000,
match_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE),
notification_time = Sys.time() - runif(1000, 0, 86400 * 30),  # Random time in the last 30 days
status = sample(c("Sent", "Read", "Accepted", "Rejected"), 1000, replace = TRUE)
)
# Historical_Matches (1000 rows)
historical_matches_data <- data.frame(
historical_match_id = 1:1000,
elderly_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE),
match_score = runif(1000, 0.5, 1),
time_slot_overlap = sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), 1000, replace = TRUE),
location_distance = runif(1000, 1, 20),
accepted = sample(0:1, 1000, replace = TRUE)
)
# Cluster (1000 rows)
cluster_data <- data.frame(
cluster_id = 1:1000,
cluster_type = sample(c("Urban Grocery", "Rural Transportation"), 1000, replace = TRUE),
elderly_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE)
)
# Export Datasets to CSV Files
write.csv(elderly_data, "elderly.csv", row.names = FALSE)
write.csv(volunteer_data, "volunteer.csv", row.names = FALSE)
write.csv(need_data, "need.csv", row.names = FALSE)
write.csv(skill_data, "skill.csv", row.names = FALSE)
write.csv(elderly_needs_data, "elderly_needs.csv", row.names = FALSE)
write.csv(volunteer_skills_data, "volunteer_skills.csv", row.names = FALSE)
write.csv(match_data, "match.csv", row.names = FALSE)
write.csv(notification_data, "notification.csv", row.names = FALSE)
write.csv(historical_matches_data, "historical_matches.csv", row.names = FALSE)
write.csv(cluster_data, "cluster.csv", row.names = FALSE)
# Print confirmation
cat("All datasets have been created and exported to CSV files.\n")
library(shiny)
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# 1. Generate Elderly Profiles
generate_elderly_profiles <- function(n) {
data.frame(
elderly_id = 1:n,
name = randomNames(n, which.names = "both"),  # FIXED: Changed to "both"
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
needs = replicate(n, paste(sample(c("Grocery shopping",
"Transportation to appointments",
"Companionship (social activities)",
"Home maintenance (minor repairs)",
"Gardening",
"Cooking meals",
"Housekeeping",
"Pet care",
"Tech support (computers, phones)",
"Errands (post office, dry cleaning)",
"Reading aloud (books, newspapers)",
"Playing games (cards, board games)",
"Walking/exercise assistance",
"Respite care (for family caregivers)",
"Personal care (dressing, bathing - non-medical)",
"Medication reminders (non-medical)",
"Financial management assistance (budgeting)",
"Legal assistance referrals",
"Social event planning",
"Arts and crafts activities",
"Music and entertainment",
"Travel companionship",
"Volunteer coordination",
"Senior center activities",
"Educational programs",
"Accessibility modifications (home)",
"Assistive technology training",
"Home safety assessments",
"Fall prevention assistance",
"Mental wellness support (non-clinical)"),
sample(1:10, 1), replace = TRUE), collapse = ", ")),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(elderly_id, name, age, major_city, state, needs)
}
# 2. Generate Volunteer Profiles
generate_volunteer_profiles <- function(n) {
data.frame(
volunteer_id = 1:n,
name = randomNames(n, which.names = "both"),  # FIXED: Changed to "both"
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
skills = replicate(n, paste(sample(c("Grocery shopping assistance",
"Transportation (driving, accompanying)",
"Companionship (social outings, visits)",
"Minor home repairs (plumbing, electrical)",
"Gardening and yard work",
"Meal preparation and cooking",
"Housekeeping and cleaning",
"Pet care (walking, feeding)",
"Tech support (computers, phones, tablets)",
"Running errands (post office, pharmacy)",
"Reading aloud (books, newspapers)",
"Playing games (cards, board games)",
"Walking and exercise assistance",
"Respite care (for family caregivers)",
"Personal care assistance (dressing, bathing)",
"Medication reminders (non-medical)",
"Financial management assistance (budgeting)",
"Legal assistance referrals",
"Social event planning",
"Arts and crafts instruction",
"Music and entertainment (playing instruments, singing)",
"Travel companionship",
"Volunteer coordination",
"Senior center activities organization",
"Educational program development",
"Home accessibility modifications",
"Assistive technology training",
"Home safety assessments",
"Fall prevention assistance",
"Mental wellness support (non-clinical)"),
sample(1:8, 1), replace = TRUE), collapse = ", ")),
availability = replicate(n, paste(sample(c("Mon 9-12", "Tue 14-17"),
sample(2:3, 1), replace = TRUE), collapse = ", ")),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(volunteer_id, name, major_city, state, skills, availability)
}
# 3. Generate Care Requests
generate_care_requests <- function(elderly, n_per_elderly = 3) {
bind_rows(lapply(1:nrow(elderly), function(i) {
data.frame(
elderly_id = elderly$elderly_id[i],
city = elderly$major_city[i],
request_date = Sys.Date() - days(sample(0:30, n_per_elderly)),
status = sample(c("Completed", "Pending"), n_per_elderly, prob = c(0.7, 0.3), replace = TRUE),
needs = elderly$needs[i],
stringsAsFactors = FALSE
)
})) %>%
mutate(request_id = paste0("R", row_number()))
}
# 4. Generate Volunteer Notifications
generate_notifications <- function(volunteers, requests) {
bind_rows(lapply(1:nrow(volunteers), function(i) {
matched_requests <- requests %>%
filter(status == "Pending",
city == volunteers$major_city[i],
grepl(paste(strsplit(volunteers$skills[i], ", ")[[1]], collapse = "|"), needs))
if(nrow(matched_requests) > 0) {
data.frame(
volunteer_id = volunteers$volunteer_id[i],
request_id = sample(matched_requests$request_id, min(3, nrow(matched_requests))),
notification_date = Sys.Date() - days(sample(0:7, min(3, nrow(matched_requests)))),
status = sample(c("Accepted", "Declined", "Pending"), min(3, nrow(matched_requests)), replace = TRUE),
stringsAsFactors = FALSE
)
}
}))
}
# Generate Datasets
elderly_profiles <- generate_elderly_profiles(1000)
volunteer_profiles <- generate_volunteer_profiles(1000)
care_requests <- generate_care_requests(elderly_profiles)
notifications <- generate_notifications(volunteer_profiles, care_requests)
# Save data to CSV files
write.csv(elderly_profiles, "elderly_profiles.csv", row.names = FALSE)
write.csv(volunteer_profiles, "volunteer_profiles.csv", row.names = FALSE)
write.csv(care_requests, "care_requests.csv", row.names = FALSE)
write.csv(notifications, "notifications.csv", row.names = FALSE)
# Print confirmation
cat("All datasets have been created and exported to CSV files.\n")
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# --- Data Generation Functions ---
# 1. Generate Elderly Profiles
data.frame(
name = randomNames(n, which.names = "both"),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
radius_preference = sample(5:20, n, replace = TRUE),
) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
# 1. Generate Elderly Profiles
library(dplyr)
library(tidyr)
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# --- Data Generation Functions ---
# 1. Generate Elderly Profiles
generate_elderly_profiles <- function(n) {
data.frame(
elderly_id = 1:n,
name = randomNames(n, which.names = "both"),
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
preferred_time_slots = replicate(n, paste(sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), sample(2:3, 1), collapse = ", ")),
radius_preference = sample(5:20, n, replace = TRUE),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(elderly_id, name, age, major_city, state, preferred_time_slots, radius_preference)
}
# 2. Generate Volunteer Profiles
generate_volunteer_profiles <- function(n) {
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# --- Data Generation Functions ---
# 1. Generate Elderly Profiles
# Load zipcode data
data("zip_code_db")
# --- Data Generation Functions ---
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# --- Data Generation Functions ---
# 1. Generate Elderly Profiles
generate_elderly_profiles <- function(n) {
data.frame(
elderly_id = 1:n,
name = randomNames(n, which.names = "both"),
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
preferred_time_slots = replicate(n, paste(sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), sample(2:3, 1), collapse = ", ")),
radius_preference = sample(5:20, n, replace = TRUE),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(elderly_id, name, age, major_city, state, preferred_time_slots, radius_preference)
}
# --- Data Generation Functions ---
# 1. Generate Elderly Profiles
generate_elderly_profiles <- function(n){
# Print confirmation
cat("All datasets have been created and exported to CSV files.\n")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load zipcode data
data("zip_code_db")
# 1. Generate Elderly Profiles
generate_elderly_profiles <- function(n) {
data.frame(
elderly_id = 1:n,
name = randomNames(n, which.names = "both"),
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
preferred_time_slots = replicate(n, paste(sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), sample(2:3, 1), replace = TRUE), collapse = ", ")),
radius_preference = sample(5:20, n, replace = TRUE),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(elderly_id, name, age, major_city, state, preferred_time_slots, radius_preference)
}
# 2. Generate Volunteer Profiles
generate_volunteer_profiles <- function(n) {
data.frame(
volunteer_id = 1:n,
name = randomNames(n, which.names = "both"),
zipcode = sample(zip_code_db$zipcode, n, replace = TRUE),
availability = replicate(n, paste(sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), sample(2:3, 1), replace = TRUE), collapse = ", ")),
radius_willingness = sample(10:30, n, replace = TRUE),
acceptance_probability = runif(n, 0.5, 1),
stringsAsFactors = FALSE
) %>%
mutate(zipcode = as.character(zipcode)) %>%
left_join(zip_code_db %>% select(zipcode, major_city, state), by = "zipcode") %>%
select(volunteer_id, name, major_city, state, availability, radius_willingness, acceptance_probability)
}
# 3. Generate Needs
generate_needs <- function() {
data.frame(
need_id = 1:10,
need_name = c("Grocery help", "Transportation", "Meal Prep", "Housekeeping", "Companionship",
"Medical Assistance", "Shopping", "Errands", "Pet Care", "Gardening")
)
}
# 4. Generate Skills
generate_skills <- function() {
data.frame(
skill_id = 1:10,
skill_name = c("Driving", "Cooking", "Cleaning", "Nursing", "Gardening",
"Shopping", "Errands", "Pet Care", "Companionship", "First Aid")
)
}
# 5. Generate Elderly_Needs
generate_elderly_needs <- function(elderly, needs) {
data.frame(
elderly_id = sample(elderly$elderly_id, 2000, replace = TRUE),
need_id = sample(needs$need_id, 2000, replace = TRUE)
)
}
# 6. Generate Volunteer_Skills
generate_volunteer_skills <- function(volunteers, skills) {
data.frame(
volunteer_id = sample(volunteers$volunteer_id, 2000, replace = TRUE),
skill_id = sample(skills$skill_id, 2000, replace = TRUE)
)
}
# 7. Generate Matches
generate_matches <- function(elderly, volunteers, elderly_needs, volunteer_skills) {
data.frame(
match_id = 1:1000,
elderly_id = sample(elderly$elderly_id, 1000, replace = TRUE),
volunteer_id = sample(volunteers$volunteer_id, 1000, replace = TRUE),
match_score = runif(1000, 0.5, 1),
time_slot_overlap = sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), 1000, replace = TRUE),
location_distance = runif(1000, 1, 20),
acceptance_probability = runif(1000, 0.5, 1),
status = sample(c("Pending", "Accepted", "Rejected"), 1000, replace = TRUE)
)
}
# 8. Generate Notifications
generate_notifications <- function(matches) {
data.frame(
notification_id = 1:1000,
match_id = sample(matches$match_id, 1000, replace = TRUE),
volunteer_id = sample(matches$volunteer_id, 1000, replace = TRUE),
notification_time = Sys.time() - runif(1000, 0, 86400 * 30),  # Random time in the last 30 days
status = sample(c("Sent", "Read", "Accepted", "Rejected"), 1000, replace = TRUE)
)
}
# 9. Generate Historical_Matches
generate_historical_matches <- function() {
data.frame(
historical_match_id = 1:1000,
elderly_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE),
match_score = runif(1000, 0.5, 1),
time_slot_overlap = sample(c("Mon 9-11", "Tue 10-12", "Wed 14-16"), 1000, replace = TRUE),
location_distance = runif(1000, 1, 20),
accepted = sample(0:1, 1000, replace = TRUE)
)
}
# 10. Generate Clusters
generate_clusters <- function() {
data.frame(
cluster_id = 1:1000,
cluster_type = sample(c("Urban Grocery", "Rural Transportation"), 1000, replace = TRUE),
elderly_id = sample(1:1000, 1000, replace = TRUE),
volunteer_id = sample(1:1000, 1000, replace = TRUE)
)
}
# --- Generate All Datasets ---
elderly <- generate_elderly_profiles(1000)
volunteers <- generate_volunteer_profiles(1000)
needs <- generate_needs()
skills <- generate_skills()
elderly_needs <- generate_elderly_needs(elderly, needs)
volunteer_skills <- generate_volunteer_skills(volunteers, skills)
matches <- generate_matches(elderly, volunteers, elderly_needs, volunteer_skills)
notifications <- generate_notifications(matches)
historical_matches <- generate_historical_matches()
clusters <- generate_clusters()
# --- Export Datasets to CSV ---
write.csv(elderly, "elderly.csv", row.names = FALSE)
write.csv(volunteers, "volunteers.csv", row.names = FALSE)
write.csv(needs, "needs.csv", row.names = FALSE)
write.csv(skills, "skills.csv", row.names = FALSE)
write.csv(elderly_needs, "elderly_needs.csv", row.names = FALSE)
write.csv(volunteer_skills, "volunteer_skills.csv", row.names = FALSE)
write.csv(matches, "matches.csv", row.names = FALSE)
write.csv(notifications, "notifications.csv", row.names = FALSE)
write.csv(historical_matches, "historical_matches.csv", row.names = FALSE)
write.csv(clusters, "clusters.csv", row.names = FALSE)
# Print confirmation
cat("All datasets have been created and exported to CSV files.\n")
# Print confirmation
cat("All datasets have been created and exported to CSV files.\n")
library(shiny)
# Set the working directory
setwd("C:/MS Data Science - WMU/CS5610-Advanced R/Projects/CareMatch/Project Code")
# Set the working directory
setwd("C:/MS Data Science - WMU/CS5610-Advanced R/Projects/CareMatch/Project Code/CareMatch")
# Load data from CSV
elderly_profiles <- read.csv("elderly.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteer.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteers.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteers.csv", stringsAsFactors = FALSE)
# Define UI
ui <- fluidPage(
titlePanel("Elderly Care Matching Chatbot"),
sidebarLayout(
sidebarPanel(
selectInput("user_type", "Are you an Elderly Person or a Volunteer?",
choices = c("Elderly", "Volunteer")),
textInput("last_name", "Your Last Name:"),
numericInput("user_age", "Your Age:", value = NA, min = 60, max = 120),
selectInput("gender", "Your Gender:", choices = c("Male", "Female")),
textInput("user_location", "Your Zip Code:"),
conditionalPanel(
condition = "input.user_type == 'Elderly'",
uiOutput("needs_choices"),
selectInput("preferred_time", "Preferred Time:",
choices = c("Morning", "Afternoon", "Evening")),
actionButton("submit_elderly", "Find Volunteers")
),
width = 4
),
mainPanel(
uiOutput("chat"),
width = 8
)
)
)
# Define Server
server <- function(input, output, session) {
chat_history <- reactiveVal(data.frame(User = character(), Message = character(), stringsAsFactors = FALSE))
observeEvent(input$last_name, {
matched_elder <- elderly_profiles[elderly_profiles$Last_Name == input$last_name &
elderly_profiles$Age == input$user_age &
elderly_profiles$Gender == input$gender &
elderly_profiles$Location == input$user_location, ]
if (nrow(matched_elder) > 0) {
updateCheckboxGroupInput(session, "user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(matched_elder$Needs, ", "))),
selected = unlist(strsplit(matched_elder$Needs, ", ")))
}
})
output$needs_choices <- renderUI({
checkboxGroupInput("user_needs", "Select Your Needs:",
choices = unique(unlist(strsplit(paste(elderly_profiles$Needs, collapse = ", "), ", "))))
})
observeEvent(input$submit_elderly, {
req(input$last_name, input$user_age, input$gender, input$user_location, input$user_needs, input$preferred_time)
isolate({
new_entry <- data.frame(
User = input$last_name,
Message = paste("Hello", input$last_name, "! You need help with:", paste(input$user_needs, collapse = ", "),
"at", input$preferred_time, "."),
stringsAsFactors = FALSE
)
chat_history(rbind(chat_history(), new_entry))
# Matching Volunteers
matched_volunteers <- volunteer_profiles[volunteer_profiles$Location == input$user_location &
grepl(paste(input$user_needs, collapse = "|"), volunteer_profiles$Skills) &
volunteer_profiles$Availability == input$preferred_time, ]
if (nrow(matched_volunteers) > 0) {
matches <- paste(matched_volunteers$Name, "- Skills:", matched_volunteers$Skills, "- Available:", matched_volunteers$Availability, collapse = "\n")
} else {
matches <- "No matching volunteers found."
}
chat_history(rbind(chat_history(), data.frame(User = "System", Message = matches, stringsAsFactors = FALSE)))
})
})
output$chat <- renderUI({
chat_content <- chat_history()
if (nrow(chat_content) == 0) {
h4("Welcome! Please enter your details to find assistance.")
} else {
do.call(tagList, lapply(1:nrow(chat_content), function(i) {
div(
strong(chat_content$User[i]), ": ", chat_content$Message[i],
style = "margin-bottom: 10px;"
)
}))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
