elderly_profiles <- read.csv("elderly_profiles.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteer_profiles.csv", stringsAsFactors = FALSE)
care_requests <- read.csv("care_requests.csv", stringsAsFactors = FALSE)
notifications <- read.csv("notifications.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("CareMatch Community Portal"),
tags$head(
tags$style(HTML("
.notification-card {
border: 1px solid #ddd;
padding: 10px;
margin-bottom: 5px;
border-radius: 5px;
}
.request-card {
border: 1px solid #ddd;
padding: 10px;
margin-bottom: 5px;
border-radius: 5px;
}
"))
),
sidebarLayout(
sidebarPanel(
div(class = "user-type",
radioButtons("user_type", "Are you here as:",
choices = c("Elder needing care" = "elder",
"Volunteer caregiver" = "volunteer"),
selected = character(0))
),
numericInput("user_id", "Enter your ID:", value = NA, min = 1),
actionButton("submit", "Submit", class = "btn-primary"),
uiOutput("login_error"),
width = 3
),
mainPanel(
uiOutput("main_display"),
width = 9
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
current_step = "type_selection",
user_data = NULL,
login_error = NULL,
volunteer_notifications = NULL, # Store volunteer notifications
pending_requests = NULL # Store pending requests
)
observeEvent(input$user_type, {
rv$current_step <- "auth"
rv$user_data <- list(type = input$user_type)
rv$login_error <- NULL
})
output$login_error <- renderUI({
if (!is.null(rv$login_error)) {
div(class = "error", rv$login_error)
}
})
observeEvent(input$submit, {
req(input$user_id, input$user_type)
if (is.na(input$user_id)) {
rv$login_error <- "Please enter a valid ID number"
return()
}
user <- switch(
input$user_type,
"elder" = elderly_profiles %>% filter(elderly_id == input$user_id),
"volunteer" = volunteer_profiles %>% filter(volunteer_id == input$user_id),
{
rv$login_error <- "Please select user type"
return()
}
)
if (nrow(user) == 0) {
rv$login_error <- "ID not found in our system"
return()
}
rv$user_data <- as.list(user[1, ])
rv$current_step <- ifelse(input$user_type == "elder", "confirm_needs", "volunteer_dashboard")
rv$login_error <- NULL
# Load notifications and pending requests for volunteers:
if (input$user_type == "volunteer") {
rv$volunteer_notifications <- notifications %>%
filter(volunteer_id == rv$user_data$volunteer_id) %>%
arrange(desc(notification_date)) # Order by date
rv$pending_requests <- care_requests %>%
filter(city == rv$user_data$city, # Use major_city
status == "Pending") %>%
left_join(elderly_profiles, by = "elderly_id") # Join for elderly info
}
})
output$main_display <- renderUI({
req(rv$current_step)
switch(
rv$current_step,
"confirm_needs" = confirm_needs_ui(),
"volunteer_dashboard" = volunteer_dashboard_ui(),
h4("Please authenticate using your ID")
)
})
# Reactive location display:
output$user_location <- renderUI({
if (!is.null(rv$user_data)) {  # Check if user data is loaded
p(strong("Location:"), paste(rv$user_data$city, rv$user_data$state))
} else {
NULL # Or some placeholder if you prefer
}
})
confirm_needs_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"), # Use the reactive output
h4("Your Current Needs:"),
p(rv$user_data$needs),
actionButton("update_needs", "Update Needs", class = "btn-warning"),
actionButton("submit_request", "Submit New Request", class = "btn-success")
)
}
volunteer_dashboard_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"),
h4("Your Skills:"),
p(rv$user_data$skills),
h4("Your Notifications:"),
uiOutput("volunteer_notifications_display"), # Display notifications
h4("Pending Requests in Your Area:"),
uiOutput("volunteer_requests")
)
}
output$volunteer_notifications_display <- renderUI({
req(rv$volunteer_notifications)
if (nrow(rv$volunteer_notifications) > 0) {
lapply(1:nrow(rv$volunteer_notifications), function(i) {
notif <- rv$volunteer_notifications[i, ]
div(class = "notification-card", # Add some styling (see below)
p(paste("Request ID:", notif$request_id)),
p(paste("Notification Date:", notif$notification_date)),
p(paste("Status:", notif$status))
)
})
} else {
p("No notifications yet.")
}
})
output$volunteer_requests <- renderUI({
req(rv$pending_requests) # Use pending_requests reactive value
if (nrow(rv$pending_requests) > 0) {
lapply(1:nrow(rv$pending_requests), function(i) {
req <- rv$pending_requests[i, ]
div(class = "request-card",
h5(paste("Request from", req$name.y)),
p(paste("Needs:", req$needs.x)),
p(paste("Request Date:", req$request_date)),
actionButton(paste0("accept_", req$request_id), "Accept",
class = "btn-success btn-sm")
)
})
} else {
h4("No pending requests in your area")
}
})
observeEvent(input$submit_request, {
new_request <- data.frame(
elderly_id = rv$user_data$elderly_id,
request_date = Sys.Date(),
status = "Pending",
needs = rv$user_data$needs,
city = rv$user_data$city
#  state = rv$user_data$state
)
care_requests <<- bind_rows(care_requests, new_request)
write.csv(care_requests, "care_requests.csv", row.names = FALSE)
showNotification("New care request submitted!", type = "message")
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(tidyr)
library(randomNames)
library(zipcodeR)
library(lubridate)
# Load data
setwd("C:/MS Data Science - WMU/CS5610-Advanced R/Projects/CareMatch/Project Code")
elderly_profiles <- read.csv("elderly_profiles.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteer_profiles.csv", stringsAsFactors = FALSE)
care_requests <- read.csv("care_requests.csv", stringsAsFactors = FALSE)
notifications <- read.csv("notifications.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("CareMatch Community Portal"),
tags$head(tags$style("
.error {color: red; font-weight: bold;}
.warning {color: orange;}
")),
sidebarLayout(
sidebarPanel(
div(class = "user-type",
radioButtons("user_type", "Are you here as:",
choices = c("Elder needing care" = "elder",
"Volunteer caregiver" = "volunteer"),
selected = character(0))
),
numericInput("user_id", "Enter your ID:", value = NA, min = 1),
actionButton("submit", "Submit", class = "btn-primary"),
uiOutput("login_error"),
width = 3
),
mainPanel(
uiOutput("main_display"),
width = 9
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
current_step = "type_selection",
user_data = NULL,
login_error = NULL
)
observeEvent(input$user_type, {
rv$current_step <- "auth"
rv$user_data <- list(type = input$user_type)
rv$login_error <- NULL
})
output$login_error <- renderUI({
if (!is.null(rv$login_error)) {
div(class = "error", rv$login_error)
}
})
observeEvent(input$submit, {
req(input$user_id, input$user_type)
if (is.na(input$user_id)) {
rv$login_error <- "Please enter a valid ID number"
return()
}
user <- switch(
input$user_type,
"elder" = elderly_profiles %>% filter(elderly_id == input$user_id),
"volunteer" = volunteer_profiles %>% filter(volunteer_id == input$user_id),
{
rv$login_error <- "Please select user type"
return()
}
)
if (nrow(user) == 0) {
rv$login_error <- "ID not found in our system"
return()
}
rv$user_data <- as.list(user[1, ])
rv$current_step <- ifelse(input$user_type == "elder", "confirm_needs", "volunteer_dashboard")
rv$login_error <- NULL
})
output$main_display <- renderUI({
req(rv$current_step)
switch(
rv$current_step,
"confirm_needs" = confirm_needs_ui(),
"volunteer_dashboard" = volunteer_dashboard_ui(),
h4("Please authenticate using your ID")
)
})
# Reactive location display:
output$user_location <- renderUI({
if (!is.null(rv$user_data)) {  # Check if user data is loaded
p(strong("Location:"), paste(rv$user_data$city, rv$user_data$state))
} else {
NULL # Or some placeholder if you prefer
}
})
confirm_needs_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"), # Use the reactive output
h4("Your Current Needs:"),
p(rv$user_data$needs),
actionButton("update_needs", "Update Needs", class = "btn-warning"),
actionButton("submit_request", "Submit New Request", class = "btn-success")
)
}
volunteer_dashboard_ui <- function() {
tagList(
h3(paste("Welcome,", rv$user_data$name)),
uiOutput("user_location"), # Use the reactive output
h4("Your Skills:"),
p(rv$user_data$skills),
h4("Pending Requests in Your Area:"),
uiOutput("volunteer_requests")
)
}
output$volunteer_requests <- renderUI({
req(rv$user_data$city, rv$user_data$state) # Require both city and state
requests <- care_requests %>%
filter(city == rv$user_data$city,
# state == rv$user_data$state, # Filter by state as well
status == "Pending") %>%
left_join(elderly_profiles, by = "elderly_id")
if (nrow(requests) > 0) {
lapply(1:nrow(requests), function(i) {
req <- requests[i, ]
div(class = "request-card",
h5(paste("Request from", req$name.y)), # Use elderly name from join
p(paste("Needs:", req$needs.x)), # Use elderly needs
p(paste("Request Date:", req$request_date)),
actionButton(paste0("accept_", req$request_id), "Accept",
class = "btn-success btn-sm")
)
})
} else {
h4("No pending requests in your area")
}
})
observeEvent(input$submit_request, {
new_request <- data.frame(
elderly_id = rv$user_data$elderly_id,
request_date = Sys.Date(),
status = "Pending",
needs = rv$user_data$needs,
city = rv$user_data$city,
state = rv$user_data$state
)
care_requests <<- bind_rows(care_requests, new_request)
write.csv(care_requests, "care_requests.csv", row.names = FALSE)
showNotification("New care request submitted!", type = "message")
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(randomNames)
library(zipcodeR)
# --- Generate Sample Data (Run this once) ---
set.seed(123)
# Generate 1000 elderly profiles
generate_elderly_profiles <- function(n) {
data.frame(
name = randomNames(n, which.names = "first.last"),
age = sample(65:95, n, replace = TRUE),
zipcode = sample(zip_code_db$zip, n, replace = TRUE),
needs = replicate(n, paste(sample(c("Grocery help", "Transportation", "Companionship",
"Meal prep", "Housekeeping", "Medical reminders",
"Technology help", "Exercise companion"),
sample(1:3), replace = FALSE), collapse = ", ")),
stringsAsFactors = FALSE
) %>%
left_join(zip_code_db, by = "zip") %>%
select(name, age, city, state, needs)
}
# Generate 1000 volunteer profiles
generate_volunteer_profiles <- function(n) {
data.frame(
name = randomNames(n, which.names = "first.last"),
city = sample(unique(zipcode_db$city), n, replace = TRUE),
state = sample(state.abb, n, replace = TRUE),
skills = replicate(n, paste(sample(c("Grocery help", "Transportation", "Companionship",
"Meal prep", "Housekeeping", "Medical expertise",
"Tech support", "Physical therapy"),
sample(1:4), replace = FALSE), collapse = ", ")),
availability = replicate(n, paste(sample(c("Mon 9-12", "Tue 14-17", "Wed 10-13",
"Thu 15-18", "Fri 11-14", "Sat 10-16"),
sample(2:3)), collapse = ", ")),
stringsAsFactors = FALSE
)
}
# Save to CSV
write.csv(generate_elderly_profiles(1000), "elderly_profiles.csv", row.names = FALSE)
write.csv(generate_volunteer_profiles(1000), "volunteer_profiles.csv", row.names = FALSE)
# --- Shiny App Code ---
elderly_profiles <- read.csv("elderly_profiles.csv", stringsAsFactors = FALSE)
volunteer_profiles <- read.csv("volunteer_profiles.csv", stringsAsFactors = FALSE)
all_needs <- unique(unlist(strsplit(elderly_profiles$needs, ", ")))
all_skills <- unique(unlist(strsplit(volunteer_profiles$skills, ", ")))
ui <- fluidPage(
titlePanel("CareMatch - Interactive Elderly Care System"),
tags$head(tags$style("
.chatbox {height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;}
.user-message {color: #0066cc; margin-left: 20px;}
.bot-message {color: #009933; margin-right: 20px;}
.need-btn {margin: 3px; display: inline-block;}
")),
sidebarLayout(
sidebarPanel(
textInput("user_input", "Type your response:"),
actionButton("send", "Send"),
uiOutput("dynamic_ui"),
width = 3
),
mainPanel(
div(class = "chatbox", uiOutput("chat_history")),
uiOutput("recommendations"),
width = 9
)
)
)
server <- function(input, output, session) {
rv <- reactiveValues(
step = "welcome",
user_data = list(),
selected_needs = character(),
messages = list()
)
# Conversation flow controller
observeEvent(input$send, {
current_step <- rv$step
if(current_step == "welcome") {
rv$messages <- append(rv$messages, list(list(type = "bot", text = "Welcome to CareMatch! What's your full name?")))
rv$step <- "get_name"
}
else if(current_step == "get_name") {
profile <- elderly_profiles %>% filter(tolower(name) == tolower(input$user_input))
if(nrow(profile) > 0) {
rv$user_data <- as.list(profile[1,])
rv$selected_needs <- unlist(strsplit(rv$user_data$needs, ", "))
rv$step <- "confirm_needs"
} else {
rv$user_data$name <- input$user_input
rv$step <- "get_age"
}
}
else if(current_step == "get_age") {
rv$user_data$age <- input$user_input
rv$step <- "get_location"
}
else if(current_step == "get_location") {
rv$user_data$location <- input$user_input
rv$step <- "select_needs"
}
else if(current_step %in% c("confirm_needs", "select_needs")) {
rv$step <- "show_matches"
}
updateTextInput(session, "user_input", value = "")
})
# Dynamic UI for needs selection
output$dynamic_ui <- renderUI({
if(rv$step == "confirm_needs") {
tagList(
h4("Your typical needs:"),
lapply(rv$selected_needs, function(need) {
actionButton(need, need, class = "btn-primary need-btn")
}),
actionButton("change_needs", "Change Needs", class = "btn-warning")
)
}
else if(rv$step == "select_needs") {
tagList(
h4("Select your needs:"),
checkboxGroupInput("needs_selection", NULL, choices = all_needs)
)
}
})
# Chat history display
output$chat_history <- renderUI({
messages <- lapply(rv$messages, function(msg) {
div(class = ifelse(msg$type == "user", "user-message", "bot-message"),
strong(ifelse(msg$type == "user", "You:", "CareMatch:")),
msg$text)
})
if(rv$step == "get_name") {
messages <- append(messages, list(
div(class = "bot-message", strong("CareMatch:"), "Please enter your full name")
))
}
else if(rv$step == "get_age") {
messages <- append(messages, list(
div(class = "bot-message", strong("CareMatch:"), "Nice to meet you! How old are you?")
))
}
else if(rv$step == "get_location") {
messages <- append(messages, list(
div(class = "bot-message", strong("CareMatch:"), "Please enter your city and state (e.g., 'New York, NY')")
))
}
tagList(messages)
})
# Volunteer matching logic
output$recommendations <- renderUI({
if(rv$step == "show_matches") {
req(rv$user_data$city, rv$user_data$state)
matches <- volunteer_profiles %>%
filter(tolower(city) == tolower(rv$user_data$city),
tolower(state) == tolower(rv$user_data$state)) %>%
mutate(
skills_list = strsplit(skills, ", "),
match_score = sapply(skills_list, function(skills) {
sum(rv$selected_needs %in% skills) / length(rv$selected_needs)
})
) %>%
filter(match_score > 0) %>%
arrange(desc(match_score)) %>%
head(5)
tagList(
h3("Top Matching Volunteers:"),
if(nrow(matches) > 0) {
lapply(1:nrow(matches), function(i) {
vol <- matches[i,]
div(
h4(vol$name),
p(strong("Skills:"), vol$skills),
p(strong("Availability:"), vol$availability),
p(strong("Match Score:"), round(vol$match_score * 100), "%"),
hr()
)
})
} else {
p("No matches found. Expanding search radius...")
}
)
}
})
}
shinyApp(ui, server)
